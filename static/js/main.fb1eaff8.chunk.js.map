{"version":3,"sources":["logo.svg","state/hello/helloActions.ts","state/hello/helloReducer.ts","state/root/rootReducer.ts","state/hello/helloApi.ts","state/hello/helloSaga.ts","state/root/rootSaga.ts","Components/PageRouter/PageRoutes.ts","state/store/configureStore.ts","Components/Pages/HelloPage/HelloPage.tsx","Components/Pages/HelloPage/withHelloMessage.tsx","Components/PageRouter/PageRouter.tsx","Components/MainMenu/MainMenu.tsx","Components/AppLayout/AppLayout.tsx","Components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","HelloAction","INITIAL_STATE","message","rootReducer","combineReducers","hello","state","arguments","length","undefined","action","type","SayHelloAsync","SayHelloResult","helloApi","name","requestBody","request","method","mode","headers","Content-Type","body","JSON","stringify","fetch","then","res","json","resultJson","catch","error","console","sayHelloAsync","watchSayHelloAsync","result","regenerator_default","a","wrap","_context","prev","next","call","sent","put","stop","_marked","this","_context2","takeEvery","_marked2","rootSaga","all","fork","rootSaga_marked","PageId","configureStore","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","HelloPage","_React$Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","react_default","createElement","className","src","logo","alt","props","React","Component","mapStateToProps","ownProps","match","params","nameParam","mapDispatchToProps","dispatch","sayHello","PageRoutes","Hello","component","Wrapped","hocClass","_getPrototypeOf2","_this","_len","args","Array","_key","concat","helloTimer","wrappedProps","clearAndStartTimer","_this2","clearInterval","timer","setInterval","setState","prevProps","connectedHoc","connect","withRouter","withHelloMessage","id","path","title","PageRouter","Switch","Route","Sider","Layout","MainMenu","collapsible","menu","Item","icon","Content","AppLayout","layout","style","minHeight","Components_MainMenu_MainMenu","margin","Components_PageRouter_PageRouter","App","es","HashRouter","Components_AppLayout_AppLayout","Boolean","window","location","hostname","ReactDOM","render","Components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb1eaff8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nexport type IHelloAction = ISayHelloAsyncAction |\n  ISayHelloResultAction;\n\nexport enum HelloAction {\n  SayHelloAsync = \"SayHelloAsync\",\n  SayHelloResult = \"SayHelloResult\"\n}\n\nexport interface ISayHelloAsyncAction {\n  type: HelloAction.SayHelloAsync,\n  name: string\n}\n\nexport interface ISayHelloResultAction {\n  type: HelloAction.SayHelloResult,\n  message: string\n}\n\nexport function sayHello(name: string): ISayHelloAsyncAction {\n  return {\n    type: HelloAction.SayHelloAsync,\n    name\n  }\n}\n\nexport function sayHelloResult(message: string): ISayHelloResultAction {\n  return {\n    type: HelloAction.SayHelloResult,\n    message\n  }\n}\n","import {HelloAction, IHelloAction} from \"./helloActions\";\n\nexport interface IHelloState {\n  message: string\n}\n\nexport const INITIAL_STATE: IHelloState = {\n  message: \"Loading....\"\n};\n\nexport function helloReducer(\n  state: IHelloState = INITIAL_STATE,\n  action: IHelloAction\n): IHelloState {\n  switch (action.type) {\n    case HelloAction.SayHelloAsync: {\n      return state;\n    }\n\n    case HelloAction.SayHelloResult: {\n      return {\n        message: action.message\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport { helloReducer as hello, IHelloState } from \"../hello/helloReducer\";\n\nexport interface IRootState {\n  hello: IHelloState\n}\n\nexport const rootReducer = combineReducers<IRootState>({\n  hello\n});\n","import { IHelloResult } from \"./helloResult\";\n\nexport function helloApi(name: string): Promise<IHelloResult> {\n  const requestBody = {\n    name\n  };\n  const request = {\n    method: \"POST\",\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(requestBody)\n  };\n  const responsePromise = fetch(\"http://localhost:5000/api/hello\", request);\n  return responsePromise\n    .then((res: Response) => {\n      return res.json();\n    }).then((resultJson: any) => {\n      return {\n        message: resultJson.message\n      }\n    })\n    .catch((error: any) => {\n      console.error(\"helloApi failed\" + JSON.stringify(error));\n      throw \"helloApi failed\";\n    });\n}\n","import { call, takeEvery, put } from \"redux-saga/effects\";\n\nimport { IHelloResult } from \"./helloResult\";\nimport { HelloAction, ISayHelloAsyncAction, sayHelloResult } from \"./helloActions\";\nimport { helloApi } from \"./helloApi\";\n\nexport function* sayHelloAsync(action: ISayHelloAsyncAction): IterableIterator<any> {\n  const result: IHelloResult = yield call(helloApi, action.name);\n  yield put(sayHelloResult(result.message))\n}\n\nexport function* watchSayHelloAsync() {\n  yield takeEvery(\n    HelloAction.SayHelloAsync,\n    sayHelloAsync\n  )\n}\n","import { all, fork } from \"redux-saga/effects\";\n\nimport { watchSayHelloAsync } from \"../hello/helloSaga\";\n\nfunction* rootSaga() {\n  yield all([\n    fork(watchSayHelloAsync)\n  ]);\n}\n\nexport default rootSaga;\n","import HelloPage from \"../Pages/HelloPage/HelloPage\";\nimport { withHelloMessage } from \"../Pages/HelloPage/withHelloMessage\";\n\nexport enum PageId {\n  Hello = \"Hello\"\n}\n\nexport interface IPageRoute {\n  component: React.ComponentClass,\n  id: PageId,\n  path: string,\n  title: string\n}\n\nexport class PageRoutes {\n  public static Hello: IPageRoute = {\n    component: withHelloMessage(HelloPage),\n    id: PageId.Hello,\n    path: \"/hello/:nameParam\",\n    title: \"Hello\"\n  }\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport { rootReducer } from \"../root/rootReducer\";\nimport rootSaga from \"../root/rootSaga\";\n\nexport const configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n\n  const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n};\n\n","import React from 'react';\n\nimport logo from '../../../logo.svg';\nimport './HelloPage.css';\n\ninterface IHomePageProps {\n  message?: string,\n  name: string\n}\n\nexport class HelloPage extends React.Component<IHomePageProps> {\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h3>\n            Server message:\n          </h3>\n          <p>\n            {this.props.message}\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default HelloPage;\n","import React from \"react\";\n\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { IHelloState } from \"../../../state/hello/helloReducer\";\nimport { sayHello } from \"../../../state/hello/helloActions\";\n\nexport interface IWithHelloMessageProps {\n  message?: string,\n  name: string\n}\n\ninterface IDispatchProps {\n  sayHello: (name: string) => void;\n}\n\ninterface IWithHelloMessageHocProps\n  extends RouteComponentProps<{nameParam: string}>,\n  IDispatchProps,\n  IWithHelloMessageProps {\n\n}\n\nexport function withHelloMessage<T extends IWithHelloMessageProps>(Wrapped: React.ComponentType<T>): any {\n  const hocClass = class extends React.Component<IWithHelloMessageHocProps> {\n    state = {\n      helloTimer: undefined\n    };\n\n    public render() {\n      const wrappedProps: T = {\n        name: this.props.match.params.nameParam,\n        message: this.props.message\n      } as T;\n      return (<Wrapped {...wrappedProps} /> );\n    }\n\n    public componentDidMount() {\n      this.clearAndStartTimer();\n    }\n\n    private clearAndStartTimer() {\n      if (this.state.helloTimer) {\n        clearInterval(this.state.helloTimer);\n      }\n      const timer = setInterval(() => this.props.sayHello(this.props.match.params.nameParam), 2000);\n      this.setState({\n        helloTimer: timer\n      });\n    }\n\n    public componentDidUpdate(prevProps: IWithHelloMessageHocProps) {\n      if (prevProps.match.params.nameParam !== this.props.match.params.nameParam) {\n        this.clearAndStartTimer();\n      }\n    }\n  };\n\n  const connectedHoc = connect(mapStateToProps, mapDispatchToProps)(hocClass);\n  return withRouter(connectedHoc);\n}\n\ninterface IWithHelloMessageState {\n  hello: IHelloState\n}\n\nexport function mapStateToProps(state: IWithHelloMessageState, ownProps: IWithHelloMessageHocProps): IWithHelloMessageProps {\n  return {\n    message: state.hello.message,\n    name: ownProps.match.params.nameParam\n  }\n}\n\nexport function mapDispatchToProps(dispatch: any): IDispatchProps {\n  return {\n    sayHello: name => dispatch(sayHello(name))\n  };\n}\n","import React from 'react';\n\nimport { Route, Switch, withRouter } from \"react-router\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\nimport { PageRoutes } from \"./PageRoutes\";\n\nclass PageRouter extends React.Component<RouteComponentProps<{}>> {\n  public render() {\n    return (\n      <Switch>\n        <Route path={PageRoutes.Hello.path} component={PageRoutes.Hello.component} />\n      </Switch>\n    );\n  }\n}\n\nexport default withRouter(PageRouter);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport { Layout, Menu, Icon } from \"antd\";\nconst { Sider } = Layout;\n\nimport { IRootState } from \"../../state/root/rootReducer\";\nimport { PageId, PageRoutes } from \"../PageRouter/PageRoutes\";\n\ninterface IStateProps {\n}\n\ninterface IDispatchProps {\n}\n\ninterface IMainMenuProps extends IStateProps, IDispatchProps {\n}\n\nclass MainMenu extends React.Component<IMainMenuProps> {\n  public render() {\n    return (\n      <Sider collapsible>\n        {/* @TODO add collapsible: https://ant.design/components/layout/ */ }\n        {/* @TODO add logo: https://ant.design/components/layout/ */}\n        <Menu mode={\"inline\"}>\n          <Menu.Item key={PageId.Hello}>\n            <Icon type={\"user\"} />\n            <span>{PageRoutes.Hello.title}</span>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n    );\n  }\n}\n\nfunction mapStateToProps(state: IRootState, ownProps: IMainMenuProps): IStateProps {\n  return {\n    state: state\n  };\n}\n\nfunction mapDispatchToProps(dispatch: any, ownProps: IMainMenuProps): IDispatchProps {\n  return {};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  MainMenu\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Layout } from \"antd\";\n\nconst { Content } = Layout;\n\nimport PageRouter from \"../PageRouter/PageRouter\";\nimport MainMenu from \"../MainMenu/MainMenu\";\n\nexport class AppLayout extends React.Component<{}> {\n  public render() {\n    return (\n      <div>\n        <Layout style={{minHeight: \"100vh\"}}>\n          <MainMenu />\n          <Layout>\n            <Content style={{margin: \"16px 16px\"}}>\n              <PageRouter /> {/** Main Application Window **/}\n            </Content>\n          </Layout>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default connect<null, null>(null, null)(AppLayout);\n","import React, { Component } from 'react';\nimport { Provider } from \"react-redux\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport { configureStore } from \"../../state/store/configureStore\";\n\nimport AppLayout from \"../AppLayout/AppLayout\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={configureStore()}>\n        <HashRouter>\n          <AppLayout />\n        </HashRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" name.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}